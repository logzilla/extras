/* SyslogAgentConfig: configuring a syslog agent for Windows
Copyright © 2021 LogZilla Corp.
*/

using System;
using System.IO;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Forms;
using System.Windows.Media;
using System.Collections;
using System.Collections.ObjectModel;
using System.Collections.Generic;

namespace SyslogAgent.Config
{
    public class MenuItem
    {
        public MenuItem()
        {
            this.Items = new ObservableCollection<MenuItem>();
        }

        public string Name { get; set; }

        public ObservableCollection<MenuItem> Items { get; set; }
    }

    public partial class MainWindow : IMainView
    {

        public string previous_debug_level_string = "";
        public string previous_debug_log_filename_string = "";
        public ObservableCollection<EventLogGroupMember> logMembers;
        public EventLogGroupMember member;
        public ObservableCollection<EventLogTreeviewItem> treeviewItems;
        public List<MenuItem> menuItems;
        public ItemCollection itemCollection;

        void SetParents(EventLogGroupMember parent, ObservableCollection<EventLogGroupMember> children)
        {
            if (parent.ObservableChildren == null)
                return;
            foreach (var member in parent.ObservableChildren)
            {
                member.SetValue(EventLogTreeViewItemHelper.ParentProperty, parent);
                if (member.ObservableChildren != null)
                {
                    SetParents(member, member.ObservableChildren);
                }
            }
        }

        public MainWindow()
        {
            InitializeComponent();
            presenter = new MainPresenter(this, new Registry(), new AgentService());
            presenter.Load();
            SetSecondaryUseTLSAvailable(secondaryUseTlsCheck.IsChecked ?? false);
            SetTailProgramAvailable();

#if EXPERIMENTING
            // for testing:

            //MenuItem root = new MenuItem() { Name = "Top" };
            //MenuItem childItem1 = new MenuItem() { Name = "Child item #1" };
            //childItem1.Items.Add(new MenuItem() { Name = "Child item #1.1" });
            //childItem1.Items.Add(new MenuItem() { Name = "Child item #1.2" });
            //root.Items.Add(childItem1);
            //root.Items.Add(new MenuItem() { Name = "Child item #2" });
            ////trvMenu.Items.Add(root);
            //menuItems = new List<MenuItem>();
            //menuItems.Add(root);
            ////itemCollection = trvMenu.Items;
            ////itemCollection.Add(new MenuItem() { Name = "Test number two" });

            //// trvMenu.ItemsSource = menuItems;

            var root = new EventLogTreeviewItem() { Name = "(root)" };
            var groupOne = root.AddChild("groupOne");
            var groupOneOne = groupOne.AddChild("groupOneOne");
            groupOneOne.AddChild("nodeOneOneOne");
            groupOneOne.AddChild("nodeOneOneTwo");
            var groupOneTwo = groupOne.AddChild("groupOneTwo");
            groupOneTwo.AddChild("nodeOneTwoOne");
            groupOneTwo.AddChild("nodeOneTwoTwo");
            var groupTwo = root.AddChild("groupTwo");
            var groupTwoOne = groupTwo.AddChild("groupTwoOne");
            groupTwoOne.AddChild("nodeTwoOneOne");
            groupTwoOne.AddChild("nodeTwoOneTwo");
            var groupTwoTwo = groupTwo.AddChild("groupTwoTwo");
            groupTwoTwo.AddChild("nodeTwoTwoOne");
            groupTwoTwo.AddChild("nodeTwoTwoTwo");

            treeviewItems = new ObservableCollection<EventLogTreeviewItem>();
            treeviewItems.Add(new EventLogTreeviewItem() { Name = "nodeOne" });
            treeviewItems.Add(new EventLogTreeviewItem() { Name = "nodeTwo" });
            treeviewItems.Add(new EventLogTreeviewItem() { Name = "nodeThree" });
            treeviewItems[0].Children = new ObservableCollection<EventLogTreeviewItem>();
            treeviewItems[0].Children.Add(new EventLogTreeviewItem() { Name = "childOne" });
            treeviewItems[0].Children.Add(new EventLogTreeviewItem() { Name = "childTwo" });

            //EventLogGroupMember groupOneOne = new EventLogGroupMember()
            //{
            //    Name = "groupOneOne",
            //    ChildMembers = new List<EventLogGroupMember>()
            //    {
            //        new EventLogGroupMember() { Name = "memberOneOneOne"},
            //        new EventLogGroupMember() { Name = "memberOneOneTwo"}
            //    }
            //};
            //EventLogGroupMember groupOneTwo = new EventLogGroupMember()
            //{
            //    Name = "groupOneTwo",
            //    ChildMembers = new List<EventLogGroupMember>()
            //    {
            //        new EventLogGroupMember() { Name = "memberOneTwoOne"},
            //        new EventLogGroupMember() { Name = "memberOneTwoTwo"}
            //    }
            //};
            //EventLogGroupMember groupTwoOne = new EventLogGroupMember()
            //{
            //    Name = "groupTwoOne",
            //    ChildMembers = new List<EventLogGroupMember>()
            //    {
            //        new EventLogGroupMember() { Name = "memberTwoOneOne"},
            //        new EventLogGroupMember() { Name = "memberTwoOneTwo"}
            //    }
            //};
            //EventLogGroupMember groupTwoTwo = new EventLogGroupMember()
            //{
            //    Name = "groupTwoTwo",
            //    ChildMembers = new List<EventLogGroupMember>()
            //    {
            //        new EventLogGroupMember() { Name = "memberTwoTwoOne"},
            //        new EventLogGroupMember() { Name = "memberTwoTwoTwo"}
            //    }
            //};
            //EventLogGroupMember groupOne = new EventLogGroupMember()
            //{
            //    Name = "groupOne",
            //    ChildMembers = new List<EventLogGroupMember>() { groupOneOne, groupOneTwo }
            //};
            //EventLogGroupMember groupTwo = new EventLogGroupMember()
            //{
            //    Name = "groupTwo",
            //    ChildMembers = new List<EventLogGroupMember>() { groupTwoOne, groupTwoTwo }
            //};

            //Globals.EventLogTop = new EventLogGroupMember()
            //{
            //    Name = "(root)",
            //    ChildMembers = new List<EventLogGroupMember>() { groupOne, groupTwo }
            //};


            //SetParents(Globals.EventLogTop, Globals.EventLogTop.ObservableChildren);
            //logMembers = Globals.EventLogTop.ObservableChildren;
            //member = Globals.EventLogTop;
            // treeView.ItemsSource = logMembers;
            // treeView.ItemsSource = treeviewItems;
#endif
            var root = presenter.eventLogTreeviewRoot;
            //root.SetIsCheckedAll(false);
            treeView.ItemsSource = root.Children;

        }

        public IValidatedStringView PollInterval => new ValidatedTextBox(pollIntervalText);
        public IOptionView LookUpAccount => new ValidatedOptionCheckBox(lookUpAccountCheck);
        //public IOptionView IncludeKeyValuePairs => new ValidatedOptionCheckBox(includeKeyValueCheck);
        public IOptionView SendToSecondary => new ValidatedOptionCheckBox(sendToSecondaryCheck);
        public IValidatedOptionView PrimaryUseTls => new ValidatedOptionCheckBox(primaryUseTlsCheck);
        public IValidatedOptionView SecondaryUseTls => new ValidatedOptionCheckBox(secondaryUseTlsCheck);
        public IValidatedStringView EventIdFilter => new ValidatedTextBox(eventIdFilterText);
        public IValidatedStringView Suffix => new ValidatedTextBox(suffixText);
        public IValidatedStringView SecondaryHost => new ValidatedTextBox(secondaryHostText);
        public IValidatedStringView PrimaryHost => new ValidatedTextBox(primaryHostText);
        // public SelectionListView Logs => new SelectionListBox(logsList);
        public IOptionListView Facility => new OptionListCombo(facilityCombo);
        public IOptionListView Severity => new OptionListCombo(severityCombo);
        public IOptionListView DebugLevel => new OptionListCombo(debugLevelCombo);
        public IValidatedStringView DebugLogFilename => new ValidatedTextBox(debugLogFilename);
        public IValidatedStringView TailFilename => new ValidatedTextBox(txtTailFilename);
        public IValidatedStringView TailProgramName => new ValidatedTextBox(txtTailProgramName);
        public string Message { set { messageText.Text = value; } }
        public string LogzillaFileVersion { set { tbkLogzillaVersion.Text = "LogZilla Syslog Agent version " + value; } }

        public string Status
        {
            set { serviceText.Dispatcher.BeginInvoke(new Action(() => { serviceText.Text = value; })); }
        }


        public void SetFailureMessage(string message)
        {
            messageText.Text = message;
            messageText.Foreground = new SolidColorBrush(Color.FromRgb(255, 0, 0));
        }

        public void SetSuccessMessage(string message)
        {
            messageText.Text = message;
            messageText.Foreground = SystemColors.ControlTextBrush;
        }

        void SaveButton_OnClick(object sender, RoutedEventArgs e)
        {
            presenter.Save();
        }

        void RestartButton_OnClick(object sender, RoutedEventArgs e)
        {
            presenter.Restart();
        }

        void SelectAllButton_OnClick(object sender, RoutedEventArgs e)
        {
            presenter.SetAllChosen(true);
        }

        void UnselectAllButton_OnClick(object sender, RoutedEventArgs e)
        {
            presenter.SetAllChosen(false);
        }

        void UIElement_OnPreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            presenter.PreviewInput();
        }

        void UIElement_OnPreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            presenter.PreviewInput();
        }

        readonly MainPresenter presenter;

        private void DebugLevelChangedEventHandler(object sender, System.Windows.Controls.SelectionChangedEventArgs args)
        {
            ComboBoxItem old_box = (ComboBoxItem)debugLevelCombo.SelectedItem;
            string old_box_value = (string)old_box.Content;
            ComboBoxItem new_box = (ComboBoxItem)args.AddedItems[0];
            string new_box_value = (string)new_box.Content;
            debugLogFilename.IsEnabled = new_box_value != "None";
            if (previous_debug_level_string == "") // this is the initial load
            {
                previous_debug_level_string = old_box_value;
                previous_debug_log_filename_string = debugLogFilename.Text == "" ? SharedConstants.ConfigDefaults.DebugLogFilename : debugLogFilename.Text;
                if (new_box_value == "None")
                {
                    debugLogFilename.Text = "";
                }
            }
            else
            {
                if (previous_debug_level_string == "None" && new_box_value != "None" && debugLogFilename.Text == "")
                {
                    previous_debug_level_string = new_box_value;
                    debugLogFilename.Text = previous_debug_log_filename_string;
                }
                else if (previous_debug_level_string != "None" && new_box_value == "None")
                {
                    previous_debug_level_string = new_box_value;
                    previous_debug_log_filename_string = debugLogFilename.Text;
                    debugLogFilename.Text = "";
                }
            }
        }

        private void ChooseCertFileButton_Click(object sender, RoutedEventArgs e)
        {
            System.Windows.Controls.Button button_clicked = (System.Windows.Controls.Button)sender;
            bool is_secondary = button_clicked.Name == "chooseSecondaryCertFileButton";
            using (OpenFileDialog open_file_dialog = new OpenFileDialog())
            {
                DialogResult dialog_result = open_file_dialog.ShowDialog();
                if (dialog_result == System.Windows.Forms.DialogResult.OK)
                {
                    WriteCertFile(open_file_dialog.FileName, is_secondary);
                }
                else
                {
                    System.Windows.MessageBox.Show("Cancelled");
                }
            }
        }

        private string GetCertFileDirectory()
        {
            if (File.Exists(Globals.ExeFilePath + SharedConstants.SyslogAgentExeFilename))
            {
                return Globals.ExeFilePath;
            }
            using (FolderBrowserDialog folder_browser_dialog = new FolderBrowserDialog())
            {
                folder_browser_dialog.Description = "Choose the directory with syslogagent.exe";
                while (true)
                {
                    DialogResult dialog_result = folder_browser_dialog.ShowDialog();
                    if (dialog_result == System.Windows.Forms.DialogResult.OK)
                    {
                        string selected_path = folder_browser_dialog.SelectedPath;
                        if (File.Exists(selected_path + "\\" + SharedConstants.SyslogAgentExeFilename))
                        {
                            Globals.ExeFilePath = selected_path + "\\";
                            return selected_path + "\\";
                        }
                        // otherwise
                        System.Windows.Forms.MessageBox.Show("syslogagent.exe not found in that directory");
                    }
                    else if (dialog_result == System.Windows.Forms.DialogResult.Cancel)
                    {
                        return null;
                    }
                }
            }
        }

        private void WriteCertFile(string source_filename, bool is_secondary)
        {
            string certfile_directory = GetCertFileDirectory();
            if (certfile_directory == null)
            {
                System.Windows.MessageBox.Show("Cancelled");
                return;
            }
            string certfile_path = certfile_directory + (is_secondary ? SharedConstants.SecondaryCertFilename : SharedConstants.PrimaryCertFilename);
            if (source_filename == certfile_path)
            {
                System.Windows.MessageBox.Show("That is the existing cert file. No changes made.");
                return;
            }
            File.Copy(source_filename, certfile_path, true);
            System.Windows.MessageBox.Show((is_secondary ? "Secondary" : "Primary") + " cert loaded from " + source_filename + ", saved to " + certfile_path);
        }

        private void TailFilename_OnClick(object sender, RoutedEventArgs e)
        {
            using (OpenFileDialog open_file_dialog = new OpenFileDialog())
            {
                DialogResult dialog_result = open_file_dialog.ShowDialog();
                if (dialog_result == System.Windows.Forms.DialogResult.OK)
                {
                    txtTailFilename.Text = open_file_dialog.FileName;
                }
                else
                {
                    System.Windows.MessageBox.Show("Cancelled");
                }
            }
        }

        private void sendToSecondaryCheck_Checked(object sender, RoutedEventArgs e)
        {
            SetSecondaryUseTLSAvailable(true);
        }

        private void sendToSecondaryCheck_Unchecked(object sender, RoutedEventArgs e)
        {
            SetSecondaryUseTLSAvailable(false);
        }

        private void SetSecondaryUseTLSAvailable(bool available)
        {
            if (!available)
                secondaryUseTlsCheck.IsChecked = false;
            secondaryUseTlsCheck.IsEnabled = available;
            chooseSecondaryCertFileButton.IsEnabled = available;

        }


        private void SetTailProgramAvailable()
        {
            txtTailProgramName.IsEnabled = !string.IsNullOrEmpty(txtTailFilename.Text);
        }

        private void txtTailFilename_TextChanged(object sender, TextChangedEventArgs e)
        {
            txtTailFilename.Text = txtTailFilename.Text.Trim();
            if (txtTailFilename.Text == "")
                txtTailProgramName.Text = "";
            SetTailProgramAvailable();
        }
    }
}
