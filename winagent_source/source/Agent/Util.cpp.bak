#include "stdafx.h"
#include <algorithm>
#include <clocale>
#include <codecvt>
#include <fstream>
#include <iostream>
#include <locale>
#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <string>
#include <vector>

#include "Util.h"

using namespace std;

void Util::toPrintableAscii(char* destination, int destination_count, const wchar_t* source, char space_replacement) {
	int i;
	for (i = 0; i < destination_count - 1; i++) {
		if (source[i] == 0) break;
		if (source[i] < 32 || source[i] > 126) destination[i] = '?';
		else if (source[i] == 32) destination[i] = space_replacement;
		else destination[i] = static_cast<char>(source[i]);
	}
	destination[i] = 0;
}

std::string Util::wstr2str(const std::wstring& wstr)
{
	using convert_typeX = std::codecvt_utf8<wchar_t>;
	std::wstring_convert<convert_typeX, wchar_t> converterX;

	return converterX.to_bytes(wstr);
}

std::string Util::wstr2str_truncate(const std::wstring& wstr) {
	std::string result(wstr.length(), 0);
	std::transform(wstr.begin(), wstr.end(), std::back_inserter(result), [](wchar_t c) {
		return (char)c;
		});
	return result;
}

wstring Util::getThisPath()
{
	return getThisPath(false);
}

wstring Util::getThisPath(bool with_trailing_backslash)
{

	TCHAR buf[1024];
	DWORD length = GetModuleFileName(NULL, buf, 1024);
	// link to this library fails...
	//#if (NTDDI_VERSION >= NTDDI_WIN8)
	//	PathCchRemoveFileSpec(dest, destSize);
	//#else
	//	if (MAX_PATH > destSize) return NULL;
	//	PathRemoveFileSpec(dest);
	//#endif
	// so we do it this way:
	wstring module_filename_wstr = wstring(buf, length);
	size_t last_pos = module_filename_wstr.find_last_of(L'\\');
	if (last_pos == string::npos || last_pos < 1) {
		return wstring();
	}
	return module_filename_wstr.substr(0, last_pos) + (with_trailing_backslash ? L"\\" : L"");
}

string Util::readFileAsString(const char* filename) {
	ifstream infile(filename);
	if (!infile) {
		return string();
	}
	stringstream buffer;
	buffer << infile.rdbuf();
	return buffer.str();
}

string Util::readFileAsString(const wchar_t* filename) {
	FILE* infile;
	_wfopen_s(&infile, filename, L"r");
	if (!infile) {
		return string();
	}

	fseek(infile, 0, SEEK_END);
	long fsize = ftell(infile);
	fseek(infile, 0, SEEK_SET);  /* same as rewind(f); */
	vector<char> contents(fsize + 1);
	fread(contents.data(), 1, fsize, infile);
	fclose(infile);
	contents[fsize] = 0;
	return string(contents.data(), fsize);
}

void Util::replaceAll(std::string& str, const std::string& from, const std::string& to) {
	if (from.empty())
		return;
	size_t start_pos = 0;
	while ((start_pos = str.find(from, start_pos)) != std::string::npos) {
		str.replace(start_pos, from.length(), to);
		start_pos += to.length(); // In case 'to' contains 'from', like replacing 'x' with 'yx'
	}
}

size_t Util::hashWstring(const std::wstring& _Keyval)
{	// hash _Keyval to size_t value by pseudorandomizing transform
	size_t _Val = 2166136261U;
	size_t _First = 0;
	size_t _Last = _Keyval.size();
	size_t _Stride = 1 + _Last / 10;

	if (_Stride < _Last)
		_Last -= _Stride;
	for (; _First < _Last; _First += _Stride)
		_Val = 16777619U * _Val ^ (size_t)_Keyval[_First];
	return (_Val);
}

int Util::jsonEscape(char* input_buffer, char* output_buffer, int output_buffer_length) {
	int output_pos = 0;
	for (int i = 0;
		output_pos < output_buffer_length - 1 && input_buffer[i] != 0;
		++i) {
		char escaped_char = 0;
		char cur_char = input_buffer[i];
		switch (cur_char) {
		case 9:
			escaped_char = 't';
			break;
		case 10:
			escaped_char = 'n';
			break;
		case 13:
			escaped_char = 'r';
			break;
		case '\\':
			escaped_char = '\\';
			break;
		case '"':
			escaped_char = '"';
			break;
		}
		if (escaped_char != 0) {
			output_buffer[output_pos++] = '\\';
			output_buffer[output_pos++] = escaped_char;
		}
		else {
			output_buffer[output_pos++] = cur_char;
		}
	}
	output_buffer[output_pos] = 0;
	return output_pos + 1;
}

