#!/usr/bin/env perl

# TODO: Build dashboards for other areas (vpn, etc.)
use strict;
use warnings;
use JSON;

my $sampleLog = '../samples/sample-events.log';
open(my $fh, '>', $sampleLog) or die "Could not open file '$sampleLog' $!";

my $debug = 0;
my (@rewrite_rules);
my $events_with_geo = qr(0203-000C|0203-0015|0203-0021|0203-0022|0205-000B|0205-0011|0207-0001|0208-0001|0F01-0016|1100-0004|1600-0065|1600-0066|1AFF-001B|1AFF-0021|1AFF-0024|1AFF-0033|1BFF-0001|1BFF-0004|1BFF-000F|1BFF-001E|2CFF-0000|2CFF-0003|2CFF-0008|2CFF-0009|2E02-0065|2E02-0066|2E02-0069|3000-0148|3000-0149|3000-0150|3000-0151|3000-0173|3001-1001|3E00-0002|3E00-0004|4900-0002);
#my $re_kv = qr/([^\s]+)=("|')[^"='\/]+("|')|\s+\${(\w+)}/mp;
my $re_kv = qr/([^\s]+)=("|')[^"='\/]+("|')|\s+\${(\w+)}|{\${(\w+)}?|\${(\w+)}}|\[\${(\w+)}\]/mp;
my @hostList = ('corp-m500', 'nyc-m500', 'lax-m500', 'atl-m500', 'lon-m500');
my $facility = 17;
my %sevHash =  ( 
  EMERG   => 0,
  ALERT   => 1,
  CRIT    => 2,
  ERROR   => 3,
  WARN    => 4,
  NOTICE  => 5,
  INFO    => 6,
  DEBUG   => 7
); 
foreach my $line ( <STDIN> ) {
  my ( %ruleHash, @matches, %updates, %comments, @keyMatch, $key, %tags );
  chomp( $line );
  # skip header
  next if $line =~ /^ID/;
  # skip empty lines
  next if $line =~ /^$/;
  # remove double quotes
  $line =~ s/""/"/g;
  # remove non printable
  $line =~ s/[^!-~\s]//g;
  my ($id, $level, $area, $name, $sample, $description, $format, $variables) = split /\t/, $line;
  # remove quotes from beginning and end
  $description =~ s/^"(.*)"$/$1/g;
  $sample =~ s/"(.*)"$/$1/g;
  $format =~ s/"(.*)"$/$1/g;

  # split the id into 4x4
  $id =~ s|^(\S{4})|$1-|g;

  @matches = ( 
    #{ field => "program", op => "=~", value => "(firewall|[Uu]nknown)" }, 
    { field => "message", op => "=~", value => "msg_id=\"$id\"" }
  );

  my $product = "WatchGuard_$1" if ($area =~ /(\S+).*/);

  # some of the docs had the descript and sample columns mixed up
  # most (if not all?) would have a longer sample than desc
  # so I just reversed them here
  if (length($description) > length($sample)) {
    my $desc_tmp = $description;
    my $sample_tmp = $sample;
    $sample = $desc_tmp;
    $description = $sample_tmp;
  }
  $sample = "msg_id=\"$id\" $sample";
  my $randHost = $hostList[rand @hostList];
  my $pri = ($facility*8 + $sevHash{$level});
  $updates{program} = "$product";
  $updates{message} = "\$MESSAGE NEOMeta: area=\"$area\" name=\"$name\" description=\"$description\"";

  if ($variables) { 
    $ruleHash{comment} = [
      "Severity: $level", 
      "Area: $area", 
      "Name: $name", 
      "Sample: $sample", 
      "Description: $description",
      "Format: $format",
      "Variables: $variables"
    ];
  } else {
    $ruleHash{comment} = [
      "Severity: $level", 
      "Area: $area", 
      "Name: $name", 
      "Sample: $sample", 
      "Description: $description",
      "Format: $format",
    ];
  }

  while ( $line =~ /$re_kv/g ) {
    $key = $1 if $1;
    $key = $4 if $4;
    $key = $5 if $5;
    $key = $6 if $6;
    $key = $7 if $7;
    #printf ("LINE         = '%s'\n", $line) if $debug > 0;
    #printf ("KEY          = '%s'\n", $key) if $debug > 0;
    next if ( 
      $key =~ m/bytes|headers_size|id|len|
      duration|TTL|tcp_info|udp_info|mac|
      path|cert|md5|severity|uuid|data|
      elapsed_time|header|message|time|
      size|version|app_ctl_disp|proxy_op|
      client_ssl|ipaddress|cn|inspect_action|
      line|^n$/x 
    );
    my $ut = "ut_${product}";
    my $msg_tag = lc($ut);
    $tags{"${msg_tag}_msg_ids"} = "${id}";
    printf ("TAG          = '%s'\n", $ut) if $debug > 0;
    if ($description =~ m/^([A-z0-9]{4,})/ ) {
      $ut = "${ut}_${1}";
    } else {
      $ut = "${ut}_${1}" if ($sample =~ m/^([A-z0-9]{4,})/ );
    }
    $ut = lc("${ut}_${key}");
    $ut =~ s/[- ]/_/g;
    $tags{"$ut"} = "\${$key}";
    # Track all message id's into a UT
    printf ("SAMPLE       = '%s'\n", $sample) if $debug > 0;
    printf ("DESCRIPTION  = '%s'\n", $description) if $debug > 0;
    printf ("FORMAT       = '%s'\n", $format) if $debug > 0;
    printf ("VARIABLES    = '%s'\n", $variables) if ($variables and $debug > 0);
    printf ("KEY          = '%s'\n", $key) if $debug > 0;
    printf ("TAG          = '%s'\n\n", $ut) if $debug > 0;
    printf $fh ( "0\t%s\t%s\t%s\t%s\n", $randHost, $pri, "firewall", $sample );
  }

  # some variables weren't in the docs but were in our test logs:
  if ( "$id" eq "3000-0148" ) {
    print "ID: $id\n" if $debug > 0;
    $tags{"ut_watchguard_firewall_fqdn_dst_match"} = "\${fqdn_dst_match}";
    $tags{"ut_watchguard_firewall_dns_query"} = "\${question}";
    $tags{"ut_watchguard_firewall_src_user"} = "\${src_user}";
  }
  if ( "$id" eq "3000-0173" ) {
    print "ID: $id\n" if $debug > 0;
    $tags{"ut_watchguard_firewall_msg"} = "\${msg}";
  }
  # geo destination is not in the docs either
  if ( "$id" =~ /$events_with_geo/ ) {
    print "ID: $id\n" if $debug > 0;
    my $ut = lc("ut_${product}");
    $tags{"${ut}_geo_src"} = "\${geo_src}";
    $tags{"${ut}_geo_dst"} = "\${geo_dst}";
  }

  $ruleHash{match} = \@matches;
  $ruleHash{update} = \%updates;
  $ruleHash{tag} = \%tags if (%tags);
  push(@rewrite_rules, \%ruleHash);
}

print encode_json {'first_match_only' => \1, 'rewrite_rules' => \@rewrite_rules} if $debug < 1;
close $fh;
